name: Deploy

on:
  push:
    branches: [replace-this-with-deployment-branch-list] # Replace with [prd, stg]
    paths-ignore: # Pushes that include only these changed files won't trigger actions
      - "**/README.md"
      - "**/.gitignore"
      - "**/doc/*"

env:
  tf_version: ">=1.4.5" # Must match value in terraform/{env}/main.tf

jobs:
  env:
    name: Set Env Vars
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Timestamp
        id: date
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Set up PRD Environment Variables
        if: github.ref == 'refs/heads/prd'
        # Replace the app_name with the project name
        run: |
          matrix='{
              "env":[
                  {
                      "app_name":"app-name",
                      "tf_working_dir":"./terraform/prd",
                      "aws_account":"646364352403",
                      "aws_gha_role":"byuawsfhtl-prd-gha",
                      "image_tag":"${{ steps.date.outputs.timestamp }}"
                  }
              ]
          }'
          echo matrix=`echo $matrix | jq -c .` >> $GITHUB_ENV

      - name: Set up STG Environment Variables
        if: github.ref == 'refs/heads/stg'
        # Replace the app_name with the project name
        run: |
          matrix='{
              "env":[
                  {
                      "app_name":"app-name",
                      "tf_working_dir":"./terraform/stg",
                      "aws_account":"222021474030",
                      "aws_gha_role":"byuawsfhtl-stg-gha",
                      "image_tag":"${{ steps.date.outputs.timestamp }}"
                  }
              ]
          }'
          echo matrix=`echo $matrix | jq -c .` >> $GITHUB_ENV

    outputs:
      matrix: ${{ env.matrix }}

  format:
    name: Terraform Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            terraform

      - name: Check Terraform Formatting
        working-directory: "./terraform"
        run: terraform fmt -check -recursive

  ecr-repo:
    name: Deploy the AWS ECR Repository
    runs-on: ubuntu-latest
    needs: [env, format]
    strategy:
      matrix: ${{ fromJson(needs.env.outputs.matrix) }}
    permissions:
      contents: read
      actions: read
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ matrix.env.aws_account }}:role/${{ matrix.env.aws_gha_role }}"
          role-session-name: ${{ github.sha }}
          aws-region: us-west-2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: "${{ matrix.env.tf_working_dir }}"
        run: terraform init

      - name: Terraform Plan
        working-directory: "${{ matrix.env.tf_working_dir }}"
        run: terraform plan -target="module.app.aws_ecr_repository.ecr_repo" -var 'image_tag=${{ matrix.env.image_tag }}' -input=false -out=plan

      - name: Terraform Apply
        working-directory: "${{ matrix.env.tf_working_dir }}"
        run: terraform apply plan

  build-ecs:
    name: Build The ECS Docker Image
    runs-on: ubuntu-latest
    needs: [env, ecr-repo]
    strategy:
      matrix: ${{ fromJson(needs.env.outputs.matrix) }}
    permissions:
      contents: read
      actions: read
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            docker
            src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ matrix.env.aws_account }}:role/${{ matrix.env.aws_gha_role }}"
          role-session-name: ${{ github.sha }}
          aws-region: us-west-2

      - name: Log into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push the Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: "${{ matrix.env.app_name }}-repo"
          APP_NAME: ${{ matrix.env.app_name}}
          IMAGE_TAG: ${{ matrix.env.image_tag }}
        run: |
          docker build . --file docker/ecs.dockerfile --tag $ECR_REGISTRY/$ECR_REPO:$APP_NAME-ecs-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPO:$APP_NAME-ecs-$IMAGE_TAG

  build-lambda:
    name: Build The Lambda Docker Image
    runs-on: ubuntu-latest
    needs: [env, ecr-repo]
    strategy:
      matrix: ${{ fromJson(needs.env.outputs.matrix) }}
    permissions:
      contents: read
      actions: read
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            docker
            src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ matrix.env.aws_account }}:role/${{ matrix.env.aws_gha_role }}"
          role-session-name: ${{ github.sha }}
          aws-region: us-west-2

      - name: Log into Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push the Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: "${{ matrix.env.app_name }}-repo"
          APP_NAME: ${{ matrix.env.app_name}}
          IMAGE_TAG: ${{ matrix.env.image_tag }}
        run: |
          docker build . --file docker/lambda.dockerfile --tag $ECR_REGISTRY/$ECR_REPO:$APP_NAME-lambda-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPO:$APP_NAME-lambda-$IMAGE_TAG

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [env, format, build-ecs, build-lambda]
    strategy:
      matrix: ${{ fromJson(needs.env.outputs.matrix) }}
    permissions:
      contents: read
      actions: read
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            terraform

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ matrix.env.aws_account }}:role/${{ matrix.env.aws_gha_role }}"
          role-session-name: ${{ github.sha }}
          aws-region: us-west-2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Terraform Init
        working-directory: "${{ matrix.env.tf_working_dir }}"
        run: terraform init

      - name: Terraform Plan
        working-directory: "${{ matrix.env.tf_working_dir }}"
        run: terraform plan -var 'image_tag=${{ matrix.env.image_tag }}' -input=false -out=plan

      - name: Terraform Apply
        working-directory: "${{ matrix.env.tf_working_dir }}"
        run: terraform apply plan
